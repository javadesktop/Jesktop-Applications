######################################################################
#
#       Copyright (C) 1999 Nathan Fiedler
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# PROJECT:      JSwat
# MODULE:       JSwat
# FILE:         JSwat.properties
#
# AUTHOR:       Nathan Fiedler
#
# REVISION HISTORY:
#       Name    Date            Description
#       ----    ----            -----------
#       nf      2/22/99         Initial version
#
# DESCRIPTION:
#       Resource strings for JSwat program. Tooltips may contain
#       HTML code (but not the HTML start/stop tags).
#
#       Special characters in this resource file.
#
#        @  - This marks a menu item as a special menu. For example,
#             "@lookAndFeel" would indicate that the program should
#             insert the standard look & feel selection menu at the
#             current point in the menu. Available menus include:
#               lookAndFeel - allows look & feel selection
#
#        -  - Specifies a separator between menu items or toolbar buttons.
#
#        >  - Specifies that the next menu item in a menu definition is
#             really a submenu. Should be the name of the menu definition,
#             just as if you were defining a top-level menu.
#
# $Id: JSwat.properties,v 1.1.1.1 2002-01-11 08:50:30 paul-h Exp $
#
######################################################################

######################################################################
#		Graphical Debugger Resources
######################################################################

#
# Application main window title.
#
AppTitle = JSwat
AppDesc = A graphical Java debugger.
AppLoading = Loading, please wait...

#
# Titles of various dialogs.
#
warningTitle = Warning!
userErrorTitle = User Error!
internalErrorTitle = Internal Error!
operFailedTitle = Operation Failed!
vmStartTitle = Start VM
vmAttachTitle = Attach to Remote VM
setBreakTitle = Set Breakpoint
breaksTitle = Breakpoints

#
# Titles of tabbed panels.
#
localsTab = Locals
threadTab = Threads
classTab = Classes
watchTab = Watches
commandsTab = Commands
sourceTab = Source
stdTab = Input/Output
stackTab = Callers

#
# Table column header names.
#
localsNameColumn = Name
localsValueColumn = Value
threadsIdColumn = ID
threadsNameColumn = Name
threadsStatusColumn = Status
watchNameColumn = Name
watchValueColumn = Value
stacksStarColumn = *
stacksNumberColumn = #
stacksMethodColumn = Method
stacksSourceColumn = Source
stacksPCColumn = PC

#
# List and tree default elements.
#
emptyClassList = CLASSES
emptySourceList = SOURCES
emptyThreadList = THREADS
threadStatusMonitor = MONITOR
threadStatusNotStarted = NOT_STARTED
threadStatusRunning = RUNNING
threadStatusSleeping = SLEEPING
threadStatusUnknown = UNKNOWN
threadStatusWait = WAIT
threadStatusZombie = ZOMBIE

#
# Labels for input fields and the like.
#
classNameField = Class name:
classArgsField = Class arguments:
lineNumberField = Line number:
commandField = Command:
inputField = Input:
jvmArgsField = JVM Arguments:
hostNameField = Host:
portNumberField = Port:

#
# Button labels for various dialogs.
#
addLabel = Add
okLabel = Ok
cancelLabel = Cancel
closeLabel = Close

#
# Local Variables Tree Icons
#
lvtreeArrayImage = resources/array.gif
lvtreeMemberImage = resources/member.gif

######################################################################
#               Menubar Definitions
######################################################################

#
# Main menubar definition
#
# Each of the strings that follow form a key to be 
# used to the actual menu definition.
#
menubar = fileMenu viewMenu debugMenu stepMenu optionsMenu

#
# File Menu definition
#
# Each of the strings that follow form a key to be
# used as the basis of a menu item definition.
#
fileMenu = openFile about - exit
fileMenuLabel = File
openFileLabel = Open File...
openFileImage = resources/open.gif
openFileAction = OpenFileAction
aboutLabel = About...
aboutImage = resources/about.gif
aboutAction = AboutAction
exitLabel = Exit
exitAction = ExitAction

#
# View Menu definition
#
# Each of the strings that follow form a key to be
# used as the basis of a menu item definition.
#
viewMenu = refresh
viewMenuLabel = View
refreshLabel = Refresh
refreshImage = resources/refresh.gif
refreshAction = RefreshAction

#
# Debug Menu definition
#
# Each of the strings that follow form a key to be
# used as the basis of a menu item definition.
#
debugMenu = vmList vmAttach vmStart vmClose vmStop vmSuspend vmResume setBreak listBreak
debugMenuLabel = Debug
vmListLabel = List Running VMs
vmListAction = VMListAction
vmAttachLabel = Attach to remote...
vmAttachAction = VMAttachAction
vmStartLabel = Start VM...
vmStartImage = resources/start.gif
vmStartAction = VMStartAction
vmCloseLabel = End session
vmCloseAction =VMCloseAction
vmStopLabel = Terminate VM
vmStopImage = resources/stop.gif
vmStopAction = VMStopAction
vmSuspendLabel = Suspend
vmSuspendImage = resources/suspend.gif
vmSuspendAction = VMSuspendAction
vmResumeLabel = Resume
vmResumeImage = resources/resume.gif
vmResumeAction = VMResumeAction
setBreakLabel = Set Breakpoint...
setBreakImage = resources/break.gif
setBreakAction = SetBreakAction
listBreakLabel = Breakpoints...
listBreakAction = ListBreakAction

#
# Step Menu definition
#
# Each of the strings that follow form a key to be
# used as the basis of a menu item definition.
#
stepMenu = step stepi next nexti finish
stepMenuLabel = Step
stepLabel = Step Line
stepImage = resources/stepin.gif
stepAction = StepAction
stepiLabel = Step Instruction
stepiAction = StepiAction
nextLabel = Next Line
nextImage = resources/stepover.gif
nextAction = NextAction
nextiLabel = Next Instruction
nextiAction = NextiAction
finishLabel = Finish Method
finishImage = resources/stepout.gif
finishAction = FinishAction

#
# Special Look & feel menu label.
#
lookAndFeelLabel = Look & Feel

#
# Special Window menu labels. Window menu is always built
# after all the other menus, it is not user-controlled.
#
windowLabel = Windows
minimizeAllLabel = Minimize All
maximizeAllLabel = Maximize All

#
# Options Menu definition
#
# Each of the strings that follow form a key to be
# used as the basis of a menu item definition.
#
optionsMenu = preferences @lookAndFeel
optionsMenuLabel = Options
preferencesLabel = Preferences
preferencesAction = PreferencesAction

#
# Source view context-sensitive menu definitions.
#
addBreakpointLabel = Add breakpoint
addBreakpointAction = AddBreakpointAction
removeBreakpointLabel = Remove breakpoint
removeBreakpointAction = RemoveBreakpointAction
enableBreakpointLabel = Enable breakpoint
enableBreakpointAction = EnableBreakpointAction
disableBreakpointLabel = Disable breakpoint
disableBreakpointAction = DisableBreakpointAction

######################################################################
#               Toolbar Definition
######################################################################
# Each of the strings that follow form a key to be
# used as the basis of the tool definition. Actions
# are, of course, sharable, and in this case are shared
# with the menu items.
#
toolbar = openFile - refresh - vmStart vmStop vmSuspend vmResume setBreak - step next finish
openFileTooltip = Open source file.
refreshTooltip = Refresh the views and panels.
vmStartTooltip = Start debugging session.
vmStopTooltip = Abruptly terminates the target VM.
vmSuspendTooltip = Suspend
vmResumeTooltip = Resume
setBreakTooltip = Set Breakpoint
stepTooltip = Step by line, into methods.
nextTooltip = Step by line, over methods.
finishTooltip = Step out of current frame.

# Tooltips for panels.
classesTooltip = class tree
localsTooltip = local variables

######################################################################
#		Graphical Debugger Resources
######################################################################
classpathError1 = Do not pass the -cp or -classpath argument.
classpathError2 = Instead, use the 'classpath' command to set
classpathError3 = the classpath. JSwat will use that by default.
classpathError4 = 
classpathError5 = 

######################################################################
#		Textual Debugger Resources
######################################################################

#
# Status messages for both textual and graphical debugger.
#
ambiguousClassSpec = Class specification matches more than one class.
breakHitMsg = Breakpoint hit...
brkOnlyInClass = Breakpoints can be located only in classes.
cantReadFileMsg = Not allowed read access on specified file.
causeOfDeath = Cause of death:
checkClassExists = Check that target class exists.
checkInputOutput = Check the Input/Output panel for details.
couldntOpenFileMsg = Could not open source file.
couldntMapSrcFile = Could not find source file for class.
exceptionThrownMsg = Exception thrown...
initDoneMsg = JSwat initialization complete...
initHelpMsg = Type 'help' to learn about JSwat commands.

# Second half of message about breakpoints can only be in classes.
interfaceOrArray = is an interface or array.

deactivatingMsg = Deactivating debugging session...
invalidLineMsg = Invalid line number.
invalidPortMsg = Invalid port number.
listOfVMs = List of running virtual machines...
noCodeAtLine = No code at that line in the class.
noFileAccessMsg = Not allowed access to specified file.
noRunningVMs = No running virtual machines found.
noSessionMsg = JSwat session not active.
noSocketVMsFound = No running VMs with transport 'dt_socket' found.
noSuchClassMsg = No such class was found.
noSuchMethod = No matching method found in the class.
nowatchLocals = Cannot watch local variables, use locals panel.
overloadedMethod = Method is overloaded; please specify arguments.
vmAttached = Attached to remote VM.
vmAttachFailed = VM attach failed.
vmClosedMsg = Target VM closed.
vmDetached = Detached from remote VM.
vmDisconnected = Disconnected from target VM.
vmLoaded = VM loaded.
vmLoading = VM loading with following options, class name, and class arguments.
vmLoadFailed = VM load failed.

#
# Textual debugger messages only.
#

# Printed from 'unalias' when argument not found.
aliasNotFound = Alias not found.

# Printed from 'unalias' when argument was removed.
aliasRemoved = Alias removed.

# Displayed when an ambiguous command prefix was entered.
ambiguousMatch = Ambiguous command prefix:

attachPreviousSettings = Using previous settings to attach to VM.
attachWrongConnector = Must use 'load' or 'listen', instead of 'attach'.
attachAttachingTo = Attaching to remote host at

# User gave a bad breakpoint spec.
badBPSpec = Invalid breakpoint specification.

# User gave a bad class name.
badClassName = Invalid or unknown class name

badThreadStateInParen = (bad thread state)

# macro command doesn't allow ! usage
bangNotAllowed = ! and !! are not allowed here.

# User gave an unknown breakpoint specification.
breakpointNotFound = Breakpoint specification not found.

breakpointsDeleted = Breakpoint(s) deleted.
breakpointsDisabled = Breakpoint(s) disabled.
breakpointsEnabled = Breakpoint(s) enabled.

# Program attempted to create a command object but failed.
cantInstantiateCommand = Command could not be instantiated:

# User entered an unknown command.
commandNotFound = Command not found:

# User referred to an unknown class.
classNotFound = Class not found:
classNotFoundForFile = Class not found for file:

classNotPrepared = Class not prepared, ignoring command.

classPath = Class path:
classpathSet = Class path set.
classpathIsActive = Cannot set classpath while actively debugging.

# Displayed when 'disablegc' did its thing.
collectionDisabled = Garbage collection disabled.

# Displayed when 'enablegc' did its thing.
collectionEnabled = Garbage collection enabled.

# Printed by the 'thread' command.
currentThread = Current thread:

# Breakpoint set is being deferred.
deferring = Deferring

# More about breakpoint deference.
deferring2 = It will be set after the class is loaded.

# Shown next to breakpoints in a list.
disabledInBrackets = [disabled]

# Shown for 'where' when stack is empty.
emptyStack = (empty stack)

# Shown next to breakpoints in a list.
enabledInBrackets = [enabled]

# The properties file is missing the 'commands' list.
errorCommandList = Internal error: 'commands' list missing

# Command could not be found by the Commander.
errorCommandLoad = (Could not load command)

errorInParen = (error)

# Commander could not find the script file.
errorReadingFile = Error reading file:

# Displayed when exception occurs reading output from target VM.
errorReadingOutput = Unable to display process output

errorUnableToSet = Internal error; unable to set

exceptionCatch = Exception catch

# Displayed when user tried to 'print' an unknown data member.
fieldNotFound = Referenced field was not found

# Displayed when user tried to reference to a non-reference field
# in the 'print' command.
fieldNotObject = Value does not refer to an object reference.

fileNotFound = File not found:

# Displayed at top of command history list.
historyHeader = Command history:

# User tried to use ! but jswat couldn't find a matching 
# command in the history chain.
historyNotFound = No matching command found in history.

invalidMethod = Invalid method specification:

invalidNumberFormat = Invalid number format.

invalidOption = Invalid option:

# The given stack frame index was out of bounds.
invalidStackFrame = Invalid stack frame index.

invalidSyntax = Invalid command syntax

invalidThreadID = Invalid thread ID.

listOfAliases = List of command aliases:

listOfCommands = List of supported commands:

listOfMacros = List of command macros:

loadMissingClass = Load (or run) command requires class name.
loadPreviousSettings = Using previous launch settings to load VM.
loadWrongConnector = Must use 'attach' or 'listen', instead of 'load'.

# Strings used by lock command.
lockMonitorInfoFor = Monitor information for
lockNotOwned = Not owned
lockOwnedBy = Owned by:
lockEntryCount = entry count:
lockNoWaiters = No waiters
lockWaitingThread = Waiting thread:

# Printed when macro command finishes.
macroComplete = Macro definition completed.

missingArguments = Missing command arguments. Use 'help <command>' for more information.

missingdataInParen = (missing data)

# shown in locals panel when a native method is the current stack frame
nativeInParen = (native method)

# Displayed for the 'locals' command.
nativeMethod = Native method, no information available.

# Most operations require an active session.
noActiveSession = No active debugging session. Command ignored.

noBreakpoints = No breakpoints have been set.

# Shown when user uses a command that operates on a thread.
noCurrentThread = No current thread. Set current thread with 'thread' command.

# User requested information where there was none.
noLineNumberInfo = There is no line number information for this class.

noframeInParen = (no frame)
noThreadInParen = (no thread)
noneInParen = (none)

notFound = Not found

# Object user referred to has been collected.
objectCollected = Object has been garbage collected. No information available.

# Commander is about to parse a command script.
parsingScript = Parsing command script...

removed = Removed

# Starts a list of resolved breakpoints.
resolvedBps = Resolved breakpoints:

# Displayed by JSwat class after loading class to debug,
# where class was passed to JSwat on command-line.
resumeToBegin = Use 'resume' to begin the loaded class.

set = Set

sourcePath = Source path:

sourcepathSet = Source path set.

# Used in VM start dialog as checkbox label.
startSuspended = Start VM suspended

stopBadLineNumber = Missing or invalid line number specification. Use help.

# Printed when there's some problem resolving a deferred event request spec.
stopDeferredError = Stopping due to errors with deferred breakpoints.

# User gave an unknown thread ID.
threadNotFound = Thread not found.

# Thread has no call stack to display.
threadNotRunning = Thread is not running (no stack).

# User tried an operation which requires a thread to be suspended.
threadNotSuspended = Thread is not suspended.

# Output of the 'resume <thread-id>' command.
threadResumed = Thread(s) resumed.

# Event request setting was deferred.
setDeferred = Set deferred

# Output of the 'suspend <thread-id>' command.
threadSuspended = Thread(s) suspended.

# Printed by the 'kill' command when a thread has been killed.
threadTerminated = Thread terminated.

# Strings for the threadlocks command.
threadlocksMonitorInfo = Monitor information for thread
threadlocksNoMonitors = No monitors owned
threadlocksOwnedMonitor = Owned monitor:
threadlocksNotWaiting = Not waiting for a monitor
threadlocksWaitingFor = Waiting for monitor:

# Displayed by loadCommand when 'run' was used to start VM.
tryLoadInstead = Try using the 'load' command instead.

# Unable to set the breakpoint.
unableToSetDeferred = Unable to set deferred

unknownError = Unexpected error:

# Starts a list of unresolved breakpoints.
unresolvedBps = Unresolved breakpoints:

# User did a dumb thing, tell them how to get help.
useHelpCommands = Use 'help commands' for more information.

# Displayed when VM is starting.
vmResuming = Virtual machine resuming...

# Displayed when VM has been stopped.
vmSuspended = Virtual machine suspended.

######################################################################
#               List of Command Descriptions
######################################################################
aliasDesc = Create a command alias.
aliasesDesc = List all the aliases created with 'alias'.
attachDesc = Attach remotely to a running VM.
catchDesc = Break when the specified exception is thrown.
classDesc = Display information about a class or interface.
classesDesc = List all loaded classes.
classpathDesc = Displays or sets the classpath of the target VM.
clearDesc = Clear a previously set breakpoint.
detachDesc = Detaches from the remote VM.
disableDesc = Disables a breakpoint.
disablegcDesc = Disables garbage collection for an object.
downDesc = Move down by one in the stack frame.
dumpDesc = Prints all fields of an object.
enableDesc = Enables a breakpoint.
enablegcDesc = Enables garbage collection for an object.
exitDesc = Closes the active debugging session, and exits possibly JSwat if there are no more active sessions.
fieldsDesc = Print names of data members of a class.
frameDesc = Set the current stack frame number.
helpDesc = Basic command information:
historyDesc = Shows a command history.
ignoreDesc = Ignore when the specified exception is thrown.
interruptDesc = Interrupts a given thread.
killDesc = Terminate a thread in the target VM.
linesDesc = Print the line numbers of a class method.
listenDesc = Listens for a connection from a target VM (not yet implemented).
loadDesc = Load a Java class to be debugged.
localsDesc = Display visible local variables.
lockDesc = Display monitor and waiting thread information for an object.
macroDesc = Create a command macro.
methodsDesc = List methods of a class.
nextDesc = Step one line, stepping over function calls.
nextiDesc = Step one instruction, stepping over function calls.
printDesc = Print a variable or object data member.
readDesc = Executes the commands in the given command file.
resumeDesc = Resume execution of threads.
runDesc = Loads and runs a Java class.
sourcepathDesc = Displays or sets the source path.
stderrDesc = Prints a message to standard error of the JSwat JVM.
stdoutDesc = Prints a message to standard output of the JSwat JVM.
stepDesc = Execute a single line.
stepiDesc = Execute a single instruction.
stopDesc = Set a breakpoint at some location.
suspendDesc = Suspend execution of threads.
threadDesc = Set the current thread.
threadgroupsDesc = List all known thread groups.
threadlocksDesc = Display thread lock information.
threadsDesc = List all known threads.
unaliasDesc = Remove a command alias.
upDesc = Move up by one in the stack frame.
versionDesc = Display version information.
viewDesc = View any file or class's source file.
whereDesc = Display stack frame of thread(s).
whereiDesc = Display stack frame of thread(s) with pc info.

######################################################################
#               Command Help Strings
######################################################################
aliasHelp1 = Syntax: alias <name> <command-string>
aliasHelp2 = Subsequent uses of 'name' will invoke 'command-string'.

attachHelp1 = Syntax: attach [<host>:]<port>
attachHelp2 = Attaches to the remote VM running at the given port.
attachHelp3 = If <host> is not provided, 'localhost' is assumed.

catchHelp1 = Syntax: catch <classname>

classHelp1 = Syntax: class <class-id>

classpathHelp1 = Syntax: classpath [<path>]
classpathHelp2 = Path may contain multiple entries, separated by : or ;.
classpathHelp3 = The use of : or ; depends on your operating system.
classpathHelp4 = Without the optional path, prints the current class path.

clearHelp1 = clear
clearHelp2 = - Displays list of breakpoints and their numbers.
clearHelp3 = clear <n> [<n> ...]
clearHelp4 = - Clears the given breakpoints by their number.

disableHelp1 = disable
disableHelp2 = - Displays list of breakpoints and their numbers.
disableHelp3 = disable <n> [<n> ...]
disableHelp4 = - Disables the given breakpoints by their number.

disablegcHelp1 = Syntax: disablegc <expr>

downHelp1 = Syntax: down [<n-frames>]

dumpHelp1 = Syntax: dump <expr>
dumpHelp2 = Evaluates <expr> and prints the fields of the referenced object.

enableHelp1 = enable
enableHelp2 = - Displays list of breakpoints and their numbers.
enableHelp3 = ensable <n> [<n> ...]
enableHelp4 = - Enables the given breakpoints by their number.

enablegcHelp1 = Syntax: enablegc <expr>

fieldsHelp1 = Syntax: fields <class-id>

frameHelp1 = Syntax: frame <n>
frameHelp2 = where <n> is between one and frame count, inclusive.

helpHelp1 = \thelp commands\tdisplays list of commands and their descriptions
helpHelp2 = \thelp <command>\tdisplays help for the given command
helpHelp3 = \t!!\t\twill execute the most recent command
helpHelp4 = \t!<prefix>\twill execute the most recent matching command
helpHelp5 = \t<n> <command>\twill run the command 'n' times

ignoreHelp1 = Syntax: ignore <classname>

interruptHelp1 = Syntax: interrupt <thread-id>

killHelp1 = Syntax: kill <thread-id> ...
killHelp2 = Kills the threads given by their IDs.

linesHelp1 = Syntax: lines <class> [<method>]
linesHelp2 = With the optional <method>, displays lines in that method only.

listenHelp1 = Not yet implemented.

loadHelp1 = Syntax: load [<jvm args>] [<classname> [<class args>]]
loadHelp2 = Without any arguments, 'load' reloads the current class.
loadHelp3 = If given, the classname must be fully qualified.
loadHelp4 = Arguments following the classname are passed to the class upon startup.
loadHelp5 = Arguments preceding the classname are passed to the target VM.

localsHelp1 = Syntax: locals [<frame-number>]
localsHelp2 = Displays a frame's visible local variables.

lockHelp1 = Syntax: lock <expr>

macroHelp1 = Syntax: macro <macro-name>
macroHelp2 = Subsequent user input will be saved for later use by invoking the macro name.
macroHelp3 = Enter 'endmacro' by itself to complete the macro definition.
macroHelp4 = Aliases and macros may be used in macros, but not ! or !!.

methodsHelp1 = Syntax: methods <class-name>
methodsHelp2 = List the methods of the class by the given name.

printHelp1 = Syntax: print <expr>
printHelp2 = Evaluates <expr> and prints out the referenced value.

readHelp1 = Syntax: read <filename>
readHelp2 = Aliases and macros may be used in scripts, but not ! or !!.

resumeHelp1 = Syntax: resume [<thread-id> ...]|all
resumeHelp2 = Resumes execution of threads (default all).
resumeHelp3 = Resume can take several thread IDs at a time, space separated.

runHelp1 = Syntax: run [<classname> [<args>]]
runHelp2 = Without any arguments, run re-executes the current class.
runHelp3 = If given, the classname must be fully qualified.
runHelp4 = Arguments following the classname are passed to the class upon startup.

sourcepathHelp1 = Syntax: sourcepath [<path>]
sourcepathHelp2 = Path may contain multiple entries, separated by : or ;.
sourcepathHelp3 = The use of : or ; depends on your operating system.
sourcepathHelp4 = Without the optional path, prints the current source path.

stderrHelp1 = stderr [message]
stderrHelp2 = The message is optional, and will print a blank line if not given.

stdoutHelp1 = stdout [message]
stdoutHelp2 = The message is optional, and will print a blank line if not given.

stepHelp1 = step [out|up]
stepHelp2 = Steps a single line of code.
stepHelp3 = Use 'out' or 'up' to leave the current function.

stopHelp1 = stop
stopHelp2 = - Displays list of breakpoints.
stopHelp3 = stop [go|thread] <class id>:<line>
stopHelp4 = - Sets breakpoint in class at specified source line.
stopHelp5 = stop [go|thread] <class id>.<method>[(argument_type,...)]
stopHelp6 = - Sets breakpoint in class at specified method.
stopHelp7 = The 'go' and 'thread' options control which threads in the VM
stopHelp8 = are suspended when the event fires. 'go' suspends no threads,
stopHelp9 = while 'thread' causes only the event thread to stop.

suspendHelp1 = Syntax: suspend [<thread-id> ...]|all
suspendHelp2 = Suspends execution of threads (default all).
suspendHelp3 = Suspend can take several thread IDs at a time, space separated.

threadHelp1 = Syntax: thread <thread-id>
threadHelp2 = Sets the current thread.

threadlocksHelp1 = Syntax: threadlocks [all]|[<thread-id>]
threadlocksHelp2 = With no argument, displays lock info for current thread.
threadlocksHelp3 = With 'all' argument, displays lock info for all threads.
threadlocksHelp4 = With id argument, displays lock info for given thread.

unaliasHelp1 = Syntax: unalias <name>
unaliasHelp2 = Removes the command alias by the given name.

upHelp1 = Syntax: up [<n-frames>]

viewHelp1 = Syntax: view <file>|<class>
viewHelp2 = First tries to find <class> using the classpath and sourcepath.
viewHelp3 = If class is not found, tries to find file using absolute path.

whereHelp1 = Syntax: where [<thread-id>] | all
whereHelp2 = - Displays the stack frame of a thread.

whereiHelp1 = Syntax: wherei [<thread-id>] | all
whereiHelp2 = - Displays the stack frame of a thread with pc info.

######################################################################
# List of availble JSwat commands. These are used in the 'help commands'
# function. If your command is not listed here it can still be invoked,
# but it won't be listed as an available command.
#
# Please keep the list in alphabetical order.
######################################################################
commands = alias aliases attach catch class classes classpath \
           clear detach \
           disable disablegc down dump enable enablegc exit fields \
           frame help history ignore interrupt kill lines load \
           locals lock macro methods next nexti print read resume run \
           sourcepath stderr stdout step \
           stepi stop suspend thread threadgroups threadlocks \
           threads unalias up version where wherei view
